/* tslint:disable */
/* eslint-disable */
/**
 * Hyperledger Cactus Plugin - Connector Iroha V2
 * Can perform basic tasks on a Iroha V2 ledger
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Response type from WatchBlocks.
 * @export
 * @enum {string}
 */

export enum BlockTypeV1 {
    Binary = 'binary'
}

/**
 * 
 * @export
 * @interface ErrorExceptionResponseV1
 */
export interface ErrorExceptionResponseV1 {
    /**
     * 
     * @type {string}
     * @memberof ErrorExceptionResponseV1
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorExceptionResponseV1
     */
    error: string;
}
/**
 * 
 * @export
 * @interface Iroha2AccountId
 */
export interface Iroha2AccountId {
    /**
     * 
     * @type {string}
     * @memberof Iroha2AccountId
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Iroha2AccountId
     */
    domainId: string;
}
/**
 * 
 * @export
 * @interface Iroha2BaseConfig
 */
export interface Iroha2BaseConfig {
    [key: string]: object | any;

    /**
     * 
     * @type {Iroha2BaseConfigTorii}
     * @memberof Iroha2BaseConfig
     */
    torii: Iroha2BaseConfigTorii;
    /**
     * 
     * @type {Iroha2AccountId}
     * @memberof Iroha2BaseConfig
     */
    accountId?: Iroha2AccountId;
    /**
     * 
     * @type {Iroha2KeyPair | KeychainReference}
     * @memberof Iroha2BaseConfig
     */
    signingCredential?: Iroha2KeyPair | KeychainReference;
    /**
     * 
     * @type {Iroha2BaseConfigTransaction}
     * @memberof Iroha2BaseConfig
     */
    transaction?: Iroha2BaseConfigTransaction;
}
/**
 * 
 * @export
 * @interface Iroha2BaseConfigTorii
 */
export interface Iroha2BaseConfigTorii {
    /**
     * 
     * @type {string}
     * @memberof Iroha2BaseConfigTorii
     */
    apiURL?: string;
    /**
     * 
     * @type {string}
     * @memberof Iroha2BaseConfigTorii
     */
    telemetryURL?: string;
}
/**
 * 
 * @export
 * @interface Iroha2BaseConfigTransaction
 */
export interface Iroha2BaseConfigTransaction {
    /**
     * 
     * @type {string}
     * @memberof Iroha2BaseConfigTransaction
     */
    timeToLiveMs?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Iroha2BaseConfigTransaction
     */
    addNonce?: boolean;
}
/**
 * 
 * @export
 * @interface Iroha2KeyJson
 */
export interface Iroha2KeyJson {
    /**
     * 
     * @type {string}
     * @memberof Iroha2KeyJson
     */
    digestFunction: string;
    /**
     * 
     * @type {string}
     * @memberof Iroha2KeyJson
     */
    payload: string;
}
/**
 * 
 * @export
 * @interface Iroha2KeyPair
 */
export interface Iroha2KeyPair {
    /**
     * 
     * @type {Iroha2KeyJson}
     * @memberof Iroha2KeyPair
     */
    privateKey: Iroha2KeyJson;
    /**
     * 
     * @type {string}
     * @memberof Iroha2KeyPair
     */
    publicKey: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum IrohaInstruction {
    /**
    * Register new domain
    */
    RegisterDomain = 'registerDomain',
    /**
    * Register new asset definition
    */
    RegisterAssetDefinition = 'registerAssetDefinition',
    /**
    * Register new asset
    */
    RegisterAsset = 'registerAsset',
    /**
    * Mint asset value
    */
    MintAsset = 'mintAsset',
    /**
    * Burn asset value
    */
    BurnAsset = 'burnAsset',
    /**
    * Transfer asset between accounts
    */
    TransferAsset = 'transferAsset',
    /**
    * Register new account
    */
    RegisterAccount = 'registerAccount'
}

/**
 * 
 * @export
 * @interface IrohaInstructionRequestV1
 */
export interface IrohaInstructionRequestV1 {
    /**
     * 
     * @type {IrohaInstruction}
     * @memberof IrohaInstructionRequestV1
     */
    name: IrohaInstruction;
    /**
     * The list of arguments to pass in to the transaction request.
     * @type {Array<any>}
     * @memberof IrohaInstructionRequestV1
     */
    params: Array<any>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum IrohaQuery {
    /**
    * Get list of all registered domains
    */
    FindAllDomains = 'findAllDomains',
    /**
    * Get domain with specified ID
    */
    FindDomainById = 'findDomainById',
    /**
    * Get asset definition with specified ID
    */
    FindAssetDefinitionById = 'findAssetDefinitionById',
    /**
    * Get list of all registered asset definition
    */
    FindAllAssetsDefinitions = 'findAllAssetsDefinitions',
    /**
    * Get asset with specified ID
    */
    FindAssetById = 'findAssetById',
    /**
    * Get list of all registered assets
    */
    FindAllAssets = 'findAllAssets',
    /**
    * Get list of all ledger peers
    */
    FindAllPeers = 'findAllPeers',
    /**
    * Get account with specified ID
    */
    FindAccountById = 'findAccountById',
    /**
    * Get list of all registered accounts
    */
    FindAllAccounts = 'findAllAccounts'
}

/**
 * 
 * @export
 * @interface KeychainReference
 */
export interface KeychainReference {
    /**
     * 
     * @type {string}
     * @memberof KeychainReference
     */
    keychainId: string;
    /**
     * 
     * @type {string}
     * @memberof KeychainReference
     */
    keychainRef: string;
}
/**
 * 
 * @export
 * @interface QueryRequestV1
 */
export interface QueryRequestV1 {
    /**
     * 
     * @type {IrohaQuery}
     * @memberof QueryRequestV1
     */
    queryName: IrohaQuery;
    /**
     * 
     * @type {Iroha2BaseConfig}
     * @memberof QueryRequestV1
     */
    baseConfig?: Iroha2BaseConfig;
    /**
     * The list of arguments to pass in to the query request.
     * @type {Array<any>}
     * @memberof QueryRequestV1
     */
    params?: Array<any>;
}
/**
 * 
 * @export
 * @interface QueryResponseV1
 */
export interface QueryResponseV1 {
    /**
     * 
     * @type {any}
     * @memberof QueryResponseV1
     */
    response: any;
}
/**
 * 
 * @export
 * @interface TransactRequestV1
 */
export interface TransactRequestV1 {
    /**
     * 
     * @type {IrohaInstructionRequestV1 | Array<IrohaInstructionRequestV1>}
     * @memberof TransactRequestV1
     */
    instruction: IrohaInstructionRequestV1 | Array<IrohaInstructionRequestV1>;
    /**
     * 
     * @type {Iroha2BaseConfig}
     * @memberof TransactRequestV1
     */
    baseConfig?: Iroha2BaseConfig;
}
/**
 * 
 * @export
 * @interface TransactResponseV1
 */
export interface TransactResponseV1 {
    /**
     * 
     * @type {string}
     * @memberof TransactResponseV1
     */
    status: string;
}
/**
 * response.
 * @export
 * @interface WatchBlocksBinaryResponseV1
 */
export interface WatchBlocksBinaryResponseV1 {
    /**
     * 
     * @type {any}
     * @memberof WatchBlocksBinaryResponseV1
     */
    binaryBlock: any;
}
/**
 * Options passed when subscribing to block monitoring.
 * @export
 * @interface WatchBlocksOptionsV1
 */
export interface WatchBlocksOptionsV1 {
    /**
     * 
     * @type {BlockTypeV1}
     * @memberof WatchBlocksOptionsV1
     */
    type?: BlockTypeV1;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksOptionsV1
     */
    startBlock?: string;
    /**
     * 
     * @type {Iroha2BaseConfig}
     * @memberof WatchBlocksOptionsV1
     */
    baseConfig?: Iroha2BaseConfig;
}
/**
 * @type WatchBlocksResponseV1
 * @export
 */
export type WatchBlocksResponseV1 = ErrorExceptionResponseV1 | WatchBlocksBinaryResponseV1;

/**
 * Websocket requests for monitoring new blocks.
 * @export
 * @enum {string}
 */

export enum WatchBlocksV1 {
    Subscribe = 'org.hyperledger.cactus.api.async.hliroha2.WatchBlocksV1.Subscribe',
    Next = 'org.hyperledger.cactus.api.async.hliroha2.WatchBlocksV1.Next',
    Unsubscribe = 'org.hyperledger.cactus.api.async.hliroha2.WatchBlocksV1.Unsubscribe',
    Error = 'org.hyperledger.cactus.api.async.hliroha2.WatchBlocksV1.Error',
    Complete = 'org.hyperledger.cactus.api.async.hliroha2.WatchBlocksV1.Complete'
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Executes a query on a Iroha V2 ledger
         * @param {QueryRequestV1} [queryRequestV1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryV1: async (queryRequestV1?: QueryRequestV1, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-iroha2/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryRequestV1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Executes a transaction on a Iroha V2 ledger
         * @param {TransactRequestV1} [transactRequestV1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactV1: async (transactRequestV1?: TransactRequestV1, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-iroha2/transact`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactRequestV1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Executes a query on a Iroha V2 ledger
         * @param {QueryRequestV1} [queryRequestV1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryV1(queryRequestV1?: QueryRequestV1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResponseV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryV1(queryRequestV1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Executes a transaction on a Iroha V2 ledger
         * @param {TransactRequestV1} [transactRequestV1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactV1(transactRequestV1?: TransactRequestV1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactResponseV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactV1(transactRequestV1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Executes a query on a Iroha V2 ledger
         * @param {QueryRequestV1} [queryRequestV1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryV1(queryRequestV1?: QueryRequestV1, options?: any): AxiosPromise<QueryResponseV1> {
            return localVarFp.queryV1(queryRequestV1, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Executes a transaction on a Iroha V2 ledger
         * @param {TransactRequestV1} [transactRequestV1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactV1(transactRequestV1?: TransactRequestV1, options?: any): AxiosPromise<TransactResponseV1> {
            return localVarFp.transactV1(transactRequestV1, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Executes a query on a Iroha V2 ledger
     * @param {QueryRequestV1} [queryRequestV1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public queryV1(queryRequestV1?: QueryRequestV1, options?: any) {
        return DefaultApiFp(this.configuration).queryV1(queryRequestV1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Executes a transaction on a Iroha V2 ledger
     * @param {TransactRequestV1} [transactRequestV1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public transactV1(transactRequestV1?: TransactRequestV1, options?: any) {
        return DefaultApiFp(this.configuration).transactV1(transactRequestV1, options).then((request) => request(this.axios, this.basePath));
    }
}


