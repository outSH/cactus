/* tslint:disable */
/* eslint-disable */
/**
 * Hyperledger Cacti Plugin - Connector Ethereum
 * Can perform basic tasks on a Ethereum ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthInfoAccessTokenV1
 */
export interface AuthInfoAccessTokenV1 {
    /**
     * 
     * @type {string}
     * @memberof AuthInfoAccessTokenV1
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof AuthInfoAccessTokenV1
     */
    'trustAgentId': string;
}
/**
 * 
 * @export
 * @interface AuthInfoSubscriptionKeyV1
 */
export interface AuthInfoSubscriptionKeyV1 {
    /**
     * 
     * @type {string}
     * @memberof AuthInfoSubscriptionKeyV1
     */
    'subscriptionKey': string;
    /**
     * 
     * @type {string}
     * @memberof AuthInfoSubscriptionKeyV1
     */
    'trustAgentId': string;
    /**
     * 
     * @type {string}
     * @memberof AuthInfoSubscriptionKeyV1
     */
    'trustAgentRole': string;
    /**
     * 
     * @type {string}
     * @memberof AuthInfoSubscriptionKeyV1
     */
    'trustUserId': string;
    /**
     * 
     * @type {string}
     * @memberof AuthInfoSubscriptionKeyV1
     */
    'trustUserRole': string;
}
/**
 * @type AuthInfoV1
 * @export
 */
export type AuthInfoV1 = AuthInfoAccessTokenV1 | AuthInfoSubscriptionKeyV1;

/**
 * Error response from the connector.
 * @export
 * @interface ErrorExceptionResponseV1
 */
export interface ErrorExceptionResponseV1 {
    /**
     * Short error description message.
     * @type {string}
     * @memberof ErrorExceptionResponseV1
     */
    'message': string;
    /**
     * Detailed error information.
     * @type {string}
     * @memberof ErrorExceptionResponseV1
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface GatewayConfigurationV1
 */
export interface GatewayConfigurationV1 {
    /**
     * Gateway URL
     * @type {string}
     * @memberof GatewayConfigurationV1
     */
    'url': string;
    /**
     * Value of User-Agent header sent to CDL (to identify this client)
     * @type {string}
     * @memberof GatewayConfigurationV1
     */
    'userAgent'?: string;
    /**
     * Set to true to ignore self-signed and other rejected certificates
     * @type {boolean}
     * @memberof GatewayConfigurationV1
     */
    'skipCertCheck'?: boolean;
    /**
     * CA of CDL API gateway server in PEM format to use
     * @type {string}
     * @memberof GatewayConfigurationV1
     */
    'caPath'?: string;
    /**
     * Overwrite server name from cdlApiGateway.url to match one specified in CA
     * @type {string}
     * @memberof GatewayConfigurationV1
     */
    'serverName'?: string;
}
/**
 * 
 * @export
 * @interface RegisterHistoryDataV1Request
 */
export interface RegisterHistoryDataV1Request {
    /**
     * 
     * @type {AuthInfoV1}
     * @memberof RegisterHistoryDataV1Request
     */
    'authInfo': AuthInfoV1;
    /**
     * 
     * @type {string}
     * @memberof RegisterHistoryDataV1Request
     */
    'eventId'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterHistoryDataV1Request
     */
    'lineageId'?: string;
    /**
     * 
     * @type {any}
     * @memberof RegisterHistoryDataV1Request
     */
    'tags'?: any;
    /**
     * 
     * @type {any}
     * @memberof RegisterHistoryDataV1Request
     */
    'properties'?: any;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Register new data trail on CDL
         * @param {RegisterHistoryDataV1Request} [registerHistoryDataV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerHistoryDataV1: async (registerHistoryDataV1Request?: RegisterHistoryDataV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-cdl/register-history-data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerHistoryDataV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Register new data trail on CDL
         * @param {RegisterHistoryDataV1Request} [registerHistoryDataV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerHistoryDataV1(registerHistoryDataV1Request?: RegisterHistoryDataV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerHistoryDataV1(registerHistoryDataV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Register new data trail on CDL
         * @param {RegisterHistoryDataV1Request} [registerHistoryDataV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerHistoryDataV1(registerHistoryDataV1Request?: RegisterHistoryDataV1Request, options?: any): AxiosPromise<any> {
            return localVarFp.registerHistoryDataV1(registerHistoryDataV1Request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Register new data trail on CDL
     * @param {RegisterHistoryDataV1Request} [registerHistoryDataV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public registerHistoryDataV1(registerHistoryDataV1Request?: RegisterHistoryDataV1Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).registerHistoryDataV1(registerHistoryDataV1Request, options).then((request) => request(this.axios, this.basePath));
    }
}


